#version 330 core

struct DirectionalLight{
	vec3	direction ;
	vec3	ambient ;
	vec3	diffuse ;
	vec3	specular;
};


struct PointLight{
	vec3	position;

	vec3	ambient ;
	vec3	diffuse ;
	vec3	specular;

	//termd
	float constant ;
	float linear ;
	float quadratic;
};
struct Material{
	sampler2D diffuse ;	//这里不再保存ambient，因为通常ambient和diffuse一致。 
	sampler2D specular;
	float	shininess;
};

uniform Material material;
uniform DirectionalLight directLight ;
uniform vec3 viewerPos;
uniform bool openEffect;
uniform sampler2D shadowMap;
uniform bool gamma;

in VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
    vec4 FragPosLightSpace;
} fs_in;

out vec4 FragColor ;

//----函数
vec3 Blinn_Phong_PointLight(PointLight light , vec3 viewerPos, vec3 FragPos , vec3 norm , vec2 TexCoords);
vec3 Blinn_Phong_DirectLight(DirectionalLight light , vec3 viewerPos , vec3 FragPos , vec3 norm , vec2 texCoords);
float PCF_ShadowCalculation(vec4 fragPosLightSpace)
{
	// 执行透视除法
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;	//从裁剪空间转换到NDC，通过除以w来实现
	//注意值为 [-1,1]
	//但是深度值的范围在[0,1],我们想要使用projCoords从贴图中采集深度信息，所以我们将NDC的范围转化到[0,1]
	projCoords = projCoords * 0.5 + 0.5 ;
	float currentDepth = projCoords.z;
	
	if(currentDepth >1.0f){
		return 0.0f;
	}
	float bias = max(0.05 * (1.0 - dot(fs_in.Normal, -directLight.direction)), 0.005);
	float shadow = 0.0f;
	vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
	//textureSize返回给定采集纹理的0级mipmap的宽和高的二维向量，用1除以它返回一个单独纹理像素的大小：texelSize
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <= 1; ++y)
		{
			float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
			shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;
		}    
	}
	shadow /= 9.0 ;
	return shadow;
}

float ShadowCalculation(vec4 fragPosLightSpace)
{
	// 执行透视除法
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;	//从裁剪空间转换到NDC，通过除以w来实现
	//注意值为 [-1,1]
	//但是深度值的范围在[0,1],我们想要使用projCoords从贴图中采集深度信息，所以我们将NDC的范围转化到[0,1]
	projCoords = projCoords * 0.5 + 0.5 ;
	float closestDepth = texture(shadowMap, projCoords.xy).r; 
	float currentDepth = projCoords.z;
	
	if(currentDepth >1.0f)
		return 0.0f;

	//会导致失真
	//float shadow = (currentDepth > closestDepth) ? 1.0f : 0.0f;	
    
	//不会导致失真
	float bias = max(0.05 * (1.0 - dot(fs_in.Normal, -directLight.direction)), 0.005);	//范围在0.005 - 0.05之间。且片元表面法向量越垂直于光线，bias越大
	//float bias = 0.1f;
	float shadow = (currentDepth - bias > closestDepth) ? 1.0f : 0.0f;
	return shadow;
}


void main(){
	vec3 result = vec3(0.0f);
    result = Blinn_Phong_DirectLight(directLight , viewerPos , fs_in.FragPos, normalize(fs_in.Normal) , fs_in.TexCoords);
	
	FragColor = vec4( result,1.0f);
}

vec3 Blinn_Phong_DirectLight(DirectionalLight light , vec3 viewerPos , vec3 FragPos , vec3 norm, vec2 texCoords){
	vec3 ambient	= vec3(0.0f); 
	vec3 diffuse	= vec3(0.0f);
	vec3 specular	= vec3(0.0f);
	//1.ambient
	vec3 diffuse_color = texture(material.diffuse,  texCoords).rgb ;
	vec3 specular_color = texture(material.specular,  texCoords).rgb ;
	ambient = light.ambient * diffuse_color ;
	
	//2.diffuse		漫反射
	float diff = max( dot(norm , -light.direction) ,0.0f);
	diffuse = light.diffuse * (diff * diffuse_color ) ;

	//3.specular   镜面反射
	vec3 viewerDir = normalize(viewerPos - FragPos);
	vec3 halfwayDir = normalize(-light.direction + viewerDir);
	float spec = 0.0f;
	if(openEffect){
		spec = pow( max( dot(norm, halfwayDir),0.0f), 4 * material.shininess);
	}
	specular = light.specular * (spec * specular_color ) ;//镜面反射
	float shadow = PCF_ShadowCalculation(fs_in.FragPosLightSpace);//获取shadow值
	
	return ambient + (diffuse + specular)*( 1.0f - shadow );
}

vec3 Blinn_Phong_PointLight(PointLight light , vec3 viewerPos, vec3 FragPos , vec3 norm , vec2 TexCoords){
	vec3 ambient	= vec3(0.0f); 
	vec3 diffuse	= vec3(0.0f);
	vec3 specular	= vec3(0.0f);


	//光的衰弱
	float distance    = length(light.position - FragPos);
    float attenuation = 1.0 / (gamma ? distance * distance : distance);

	//1.ambient 
	ambient = light.ambient * texture(material.diffuse, TexCoords).rgb ;
	//FragColor = vec4(ambient + diffuse + specular, 1.0f);

	//2.diffuse		漫反射
	vec3 lightDir = normalize(light.position - FragPos);//指向光
	float diff = max( dot(norm , lightDir) ,0.0f);	
	diffuse = attenuation * light.diffuse * (diff * texture(material.diffuse, TexCoords).rgb ) ;

	//3.specular   镜面反射
	vec3 viewerDir = normalize(viewerPos - FragPos);
	vec3 halfwayDir = normalize(lightDir + viewerDir);

	float spec = 0.0f;
	if(openEffect){
		spec = pow( max( dot(norm, halfwayDir),0.0f), 4 * material.shininess);
	}
	specular =attenuation * light.specular * (spec * texture(material.specular, TexCoords).rgb  ) ;//镜面反射

	return ambient + diffuse + specular;

}


