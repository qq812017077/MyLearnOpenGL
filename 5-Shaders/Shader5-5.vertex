#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;
layout (location = 3) in vec3 aTangent;
layout (location = 4) in vec3 aBitangent; 

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;




struct PointLight{
	vec3	position;

	vec3	ambient ;
	vec3	diffuse ;
	vec3	specular;

	//term
	float constant ;
	float linear ;
	float quadratic;
};
uniform PointLight light;
uniform vec3 viewerPos;

out VS_OUT {
	vec3 FragPos;
    vec2 TexCoords;

	//计算工作都在vertex中完成
    PointLight TangentLight;
    vec3 TangentViewPos;
    vec3 TangentFragPos;	
} vs_out;

void main(){
	gl_Position = projection * view * model * vec4(aPos,1.0f);

	vs_out.FragPos = vec3( model * vec4(aPos,1.0f) );
	vs_out.TexCoords = aTexCoords;

	vec3 T = normalize(vec3(model * vec4(aTangent,   0.0)));
	vec3 B = normalize(vec3(model * vec4(aBitangent, 0.0)));
	vec3 N = normalize(vec3(model * vec4(aNormal,    0.0)));
	mat3 inverse_TBN = transpose(mat3(T, B, N)) ;//TBN可以将切线空间的坐标转换到世界坐标，而其的逆则将世界坐标转换到切线空间中。
	
	vs_out.TangentLight = light;
	vs_out.TangentLight.position =  inverse_TBN * light.position;
    vs_out.TangentViewPos  = inverse_TBN * viewerPos;
    vs_out.TangentFragPos  = inverse_TBN * vs_out.FragPos;

}