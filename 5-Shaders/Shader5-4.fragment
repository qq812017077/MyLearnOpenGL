#version 330 core

struct PointLight{
	vec3	position;

	vec3	ambient ;
	vec3	diffuse ;
	vec3	specular;

	//term
	float constant ;
	float linear ;
	float quadratic;
};
struct Material{
	sampler2D diffuse ;	//这里不再保存ambient，因为通常ambient和diffuse一致。 
	sampler2D specular;
	sampler2D normalMap; 
	float	shininess;
};

uniform Material material;
uniform PointLight light ;
uniform vec3 viewerPos;
uniform bool openEffect;
uniform bool functoin_exchange;

in VS_OUT {
    vec3 FragPos;
    vec2 TexCoords;
    mat3 TBN;
	vec3 Normal;
} fs_in; 

out vec4 FragColor ;

//----函数
vec3 Blinn_Phong_PointLight(PointLight light , vec3 viewerPos, vec3 FragPos , vec3 norm , vec2 TexCoords);
void main(){
	vec3 result = vec3(0.0f);
	vec3 normal = normalize(fs_in.TBN * fs_in.Normal);
	if(openEffect){
		normal = texture(material.normalMap, fs_in.TexCoords).rgb;	//[0,1]
		normal = normalize(normal * 2.0 - 1.0);	//[-1,1]
		normal = normalize(fs_in.TBN * normal);
	}
	result = Blinn_Phong_PointLight(light , viewerPos , fs_in.FragPos , normalize(normal) , fs_in.TexCoords);

	FragColor = vec4(result, 1.0f);
}

vec3 Blinn_Phong_PointLight(PointLight light , vec3 viewerPos, vec3 FragPos , vec3 norm , vec2 TexCoords){
	vec3 ambient	= vec3(0.0f); 
	vec3 diffuse	= vec3(0.0f);
	vec3 specular	= vec3(0.0f);

	vec3 diffuse_color = texture(material.diffuse, TexCoords).rgb;
	vec3 specular_color = texture(material.specular, TexCoords).rgb;
	//1.ambient 
	ambient = light.ambient * diffuse_color ;

	//2.diffuse		漫反射
	vec3 lightDir = normalize(light.position - FragPos);//指向光
	float diff = max( dot(norm , lightDir) ,0.0f);	
	diffuse =  light.diffuse * (diff * diffuse_color ) ;

	//3.specular   镜面反射
	vec3 viewerDir = normalize(viewerPos - FragPos);
	vec3 halfwayDir = normalize(lightDir + viewerDir);

	float spec = 0.0f;
	spec = pow( max( dot(norm, halfwayDir),0.0f), 4 * material.shininess);
	specular = light.specular * (spec * specular_color ) ;//镜面反射

		//光的衰弱
	float distance    = length(light.position - FragPos);
	float attenuation = 1.0 / (light.constant + light.linear * distance +  light.quadratic * (distance * distance)); 

	diffuse *= attenuation ;
	specular *= attenuation ;

	return ambient + diffuse + specular;

}
