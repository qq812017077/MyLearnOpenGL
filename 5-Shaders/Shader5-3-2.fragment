#version 330 core
out vec4 FragColor;


struct PointLight{
	vec3	position;

	vec3	ambient ;
	vec3	diffuse ;
	vec3	specular;

	//termd
	float constant ;
	float linear ;
	float quadratic;
};

struct Material{
	sampler2D diffuse ;	//这里不再保存ambient，因为通常ambient和diffuse一致。 
	sampler2D specular;
	float	shininess;
};

in VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
} fs_in;


uniform Material material;
uniform PointLight pointLight ;
uniform bool openEffect;
uniform samplerCube depthMap;

uniform vec3 viewerPos;

uniform float far_plane;
uniform bool gamma;
float ShadowCalculation(vec3 fragPos)
{
	vec3 LightToFrag = fragPos - pointLight.position;
	float closestDepth = texture(depthMap, LightToFrag).r;
	//注意closestDepth 还是[0,1]的范围，所以这里通过far_plane转换到原始的长度。
	closestDepth *= far_plane;//这里的才是最小距离

	float currentDepth = length(LightToFrag);	//获取当前物件的距离

	float bias = 0.05; //通过bias后进行比较
	float shadow = currentDepth -  bias > closestDepth ? 1.0 : 0.0; 
    return shadow;
}

float PCF_ShadowCalculation1(vec3 fragPos)
{
	float shadow = 0.0;
	float bias = 0.05; 
	float samples = 4.0;
	float offset = 0.1;
	vec3 LightToFrag = fragPos - pointLight.position;
	float currentDepth = length(LightToFrag);	//获取当前物件的距离
	for(float x = -offset; x < offset; x += offset / (samples * 0.5)){
		for(float y = -offset; y < offset; y += offset / (samples * 0.5)){
			for(float z = -offset; z < offset; z += offset / (samples * 0.5)){
				float closestDepth = texture(depthMap, LightToFrag + vec3(x, y, z)).r; 
				closestDepth *= far_plane;   // Undo mapping [0;1]
				if(currentDepth - bias > closestDepth)
					shadow += 1.0;
			}
		}
	}
	shadow /= (samples * samples * samples);
    return shadow;
}
float PCF_ShadowCalculation2(vec3 fragPos)
{
	vec3 sampleOffsetDirections[20] = vec3[]
	(
	   vec3( 1,  1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1,  1,  1), 
	   vec3( 1,  1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1,  1, -1),
	   vec3( 1,  1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1,  1,  0),
	   vec3( 1,  0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1,  0, -1),
	   vec3( 0,  1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0,  1, -1)
	);
	float shadow = 0.0;
	float bias = 0.15; 
	float samples = 20;
	float offset = 0.1;
	float diskRadius = 0.05;
	vec3 LightToFrag = fragPos - pointLight.position;
	float currentDepth = length(LightToFrag);	//获取当前物件的距离
	for(int i = 0; i < samples; ++i)
	{
		float closestDepth = texture(depthMap, LightToFrag + sampleOffsetDirections[i] * diskRadius).r;
		closestDepth *= far_plane;   // Undo mapping [0;1]
		if(currentDepth - bias > closestDepth)
			shadow += 1.0;
	}
	shadow /= float(samples);
    return shadow;
}
vec3 DepthInfo(){
	vec3 LightToFrag = fs_in.FragPos - pointLight.position;
	float closestDepth = texture(depthMap, LightToFrag).r;
	closestDepth *= far_plane;//这里的才是最小距离

	return vec3(closestDepth / far_plane);
}

vec3 Blinn_Phong_PointLight(PointLight light , vec3 viewerPos, vec3 FragPos , vec3 norm , vec2 TexCoords);
void main()
{           
    vec3 result = vec3(0.0f);
    result = Blinn_Phong_PointLight(pointLight , viewerPos , fs_in.FragPos, normalize(fs_in.Normal) , fs_in.TexCoords);
	
	//FragColor = vec4(vec3(closestDepth / far_plane), 1.0);
	//FragColor = vec4( DepthInfo() ,1.0f);
	FragColor = vec4( result ,1.0f);
}  

vec3 Blinn_Phong_PointLight(PointLight light , vec3 viewerPos, vec3 FragPos , vec3 norm , vec2 TexCoords){
	vec3 ambient	= vec3(0.0f); 
	vec3 diffuse	= vec3(0.0f);
	vec3 specular	= vec3(0.0f);

	//1.ambient 
	vec3 diffuse_color = texture(material.diffuse, TexCoords).rgb;
	vec3 specular_color = texture(material.specular, TexCoords).rgb;
	ambient = light.ambient * diffuse_color ;

	//2.diffuse		漫反射
	vec3 lightDir = normalize(light.position - FragPos);//指向光
	float diff = max( dot(norm , lightDir) ,0.0f);	
	diffuse =  light.diffuse * (diff * diffuse_color ) ;

	//3.specular   镜面反射
	vec3 viewerDir = normalize(viewerPos - FragPos);
	vec3 halfwayDir = normalize(lightDir + viewerDir);

	float spec = 0.0f;
	if(openEffect){
		spec = pow( max( dot(norm, halfwayDir),0.0f), 4 * material.shininess);
	}
	specular = light.specular * (spec * specular_color) ;//镜面反射

	//光的衰弱处理
	float distance    = length(light.position - FragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

	//diffuse  *= attenuation;
	//specular *= attenuation;

	float shadow = PCF_ShadowCalculation2(fs_in.FragPos);//获取shadow值
	//float shadow = 0.0f;
	return ambient + (diffuse + specular)*( 1.0f - shadow );

}