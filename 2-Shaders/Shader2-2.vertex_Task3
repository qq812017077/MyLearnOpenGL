#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;

uniform mat4 model;
uniform mat4 view ;
uniform mat4 projection ;

uniform mat4 normalMatrix;
uniform vec3 lightPos ;
uniform vec3 viewerPos ;
uniform vec3 lightColor;

uniform bool openSpecular;

//Out
out vec3 ambient ;
out vec3 diffuse ;
out vec3 specular;

void main()
{
	gl_Position = projection * view * model * vec4(aPos,1.0f) ;
	
	vec3 Normal = vec3(normalMatrix * vec4(aNormal, 0.0));
	vec3 FragPos =vec3(model * vec4(aPos, 1.0f));		//将点转换为了空间坐标

	//计算
	vec3 normal = normalize(Normal);
	vec3 lightDir = normalize(lightPos - FragPos);	//顶点到光的方向
	vec3 viewerDir = normalize(viewerPos - FragPos);	
	vec3 reflectDir = reflect(-lightDir, normal);	

	//1. ambient
	float ambientStrength = 0.2f;
	ambient = ambientStrength * lightColor;

	//2. diffuse
	float diffuseStrength = 1.0f;
	float diffuse_diff = max( dot(lightDir,normal) , 0.0f);
	diffuse = diffuseStrength * diffuse_diff *  lightColor;
	
	//specular
	float specularStrength = 1.0f;
	float spec =0.0f; 
	if(openSpecular){
		spec = pow( max(dot(reflectDir,viewerDir),0.0f),32);
	}
	specular = specularStrength * spec * lightColor ; 
}
